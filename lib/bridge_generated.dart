// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';

import 'package:meta/meta.dart';
import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

class FlkvImpl implements Flkv {
  final FlkvPlatform _platform;
  factory FlkvImpl(ExternalLibrary dylib) => FlkvImpl.raw(FlkvPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory FlkvImpl.wasm(FutureOr<WasmModule> module) =>
      FlkvImpl(module as ExternalLibrary);
  FlkvImpl.raw(this._platform);
  Future<int> dbNew({required String path, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            _platform.inner.wire_db_new(port_, _platform.api2wire_String(path)),
        parseSuccessData: _wire2api_u64,
        constMeta: kDbNewConstMeta,
        argValues: [path],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDbNewConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "db_new",
        argNames: ["path"],
      );

  Future<String?> dbGet(
          {required int ptr, required String key, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_db_get(
            port_, _platform.api2wire_u64(ptr), _platform.api2wire_String(key)),
        parseSuccessData: _wire2api_opt_String,
        constMeta: kDbGetConstMeta,
        argValues: [ptr, key],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDbGetConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "db_get",
        argNames: ["ptr", "key"],
      );

  Future<bool> dbPut(
          {required int ptr,
          required String key,
          required String value,
          dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_db_put(
            port_,
            _platform.api2wire_u64(ptr),
            _platform.api2wire_String(key),
            _platform.api2wire_String(value)),
        parseSuccessData: _wire2api_bool,
        constMeta: kDbPutConstMeta,
        argValues: [ptr, key, value],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDbPutConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "db_put",
        argNames: ["ptr", "key", "value"],
      );

  Future<bool> dbClose({required int ptr, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            _platform.inner.wire_db_close(port_, _platform.api2wire_u64(ptr)),
        parseSuccessData: _wire2api_bool,
        constMeta: kDbCloseConstMeta,
        argValues: [ptr],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDbCloseConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "db_close",
        argNames: ["ptr"],
      );

  Future<Rows> dbGetRows({required int ptr, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner
            .wire_db_get_rows(port_, _platform.api2wire_u64(ptr)),
        parseSuccessData: _wire2api_rows,
        constMeta: kDbGetRowsConstMeta,
        argValues: [ptr],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDbGetRowsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "db_get_rows",
        argNames: ["ptr"],
      );

  Future<bool> dbDelete(
          {required int ptr, required String key, dynamic hint}) =>
      _platform.executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => _platform.inner.wire_db_delete(
            port_, _platform.api2wire_u64(ptr), _platform.api2wire_String(key)),
        parseSuccessData: _wire2api_bool,
        constMeta: kDbDeleteConstMeta,
        argValues: [ptr, key],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDbDeleteConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "db_delete",
        argNames: ["ptr", "key"],
      );

// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  List<Row> _wire2api_list_row(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_row).toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  Row _wire2api_row(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Row(
      key: _wire2api_String(arr[0]),
      value: _wire2api_String(arr[1]),
    );
  }

  Rows _wire2api_rows(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Rows(
      rows: _wire2api_list_row(arr[0]),
    );
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

class FlkvPlatform extends FlutterRustBridgeBase<FlkvWire> {
  FlkvPlatform(ffi.DynamicLibrary dylib) : super(FlkvWire(dylib));
// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: api_fill_to_wire

}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class FlkvWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlkvWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlkvWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_db_new(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_db_new(
      port_,
      path,
    );
  }

  late final _wire_db_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_db_new');
  late final _wire_db_new = _wire_db_newPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_db_get(
    int port_,
    int ptr,
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_db_get(
      port_,
      ptr,
      key,
    );
  }

  late final _wire_db_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_db_get');
  late final _wire_db_get = _wire_db_getPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_db_put(
    int port_,
    int ptr,
    ffi.Pointer<wire_uint_8_list> key,
    ffi.Pointer<wire_uint_8_list> value,
  ) {
    return _wire_db_put(
      port_,
      ptr,
      key,
      value,
    );
  }

  late final _wire_db_putPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_db_put');
  late final _wire_db_put = _wire_db_putPtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_db_close(
    int port_,
    int ptr,
  ) {
    return _wire_db_close(
      port_,
      ptr,
    );
  }

  late final _wire_db_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64)>>(
          'wire_db_close');
  late final _wire_db_close =
      _wire_db_closePtr.asFunction<void Function(int, int)>();

  void wire_db_get_rows(
    int port_,
    int ptr,
  ) {
    return _wire_db_get_rows(
      port_,
      ptr,
    );
  }

  late final _wire_db_get_rowsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64)>>(
          'wire_db_get_rows');
  late final _wire_db_get_rows =
      _wire_db_get_rowsPtr.asFunction<void Function(int, int)>();

  void wire_db_delete(
    int port_,
    int ptr,
    ffi.Pointer<wire_uint_8_list> key,
  ) {
    return _wire_db_delete(
      port_,
      ptr,
      key,
    );
  }

  late final _wire_db_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_db_delete');
  late final _wire_db_delete = _wire_db_deletePtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
